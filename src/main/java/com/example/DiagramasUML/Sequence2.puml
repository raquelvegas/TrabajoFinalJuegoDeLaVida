@startuml
actor User

participant ControllerMainStage
participant Game
participant DatosCompartidos
participant Individuo
participant Recurso
participant Square
participant Tablero
participant ListaSimple
participant Grafo
participant Camino
participant Vertice

User -> ControllerMainStage: playGame(event)
activate ControllerMainStage

ControllerMainStage -> DatosCompartidos: setGameIniciado(true)
ControllerMainStage -> ControllerMainStage: gameStopped = false
ControllerMainStage -> buttonVelocidad: setDisable(false)
ControllerMainStage -> tabPaneParametros: select(pauseTab)
ControllerMainStage -> individuoTab: setDisable(true)
ControllerMainStage -> recursosParametrosTab: setDisable(true)
ControllerMainStage -> aparicionTab: setDisable(true)
ControllerMainStage -> anadirTab: setDisable(true)
ControllerMainStage -> pauseTab: setDisable(false)
ControllerMainStage -> pauseText: setVisible(true)
ControllerMainStage -> playText: setVisible(false)
ControllerMainStage -> log: info("Reanudar el juego")
deactivate ControllerMainStage

ControllerMainStage -> DatosCompartidos: isGameIniciado()
activate ControllerMainStage
alt Game is initiated
    ControllerMainStage -> DatosCompartidos: getTurnoJuego()
    ControllerMainStage -> DatosCompartidos: setTurnoJuego(turno + 1)
    ControllerMainStage -> turnoContador: setText(turno + 1)
    ControllerMainStage -> Game: turno()
    activate Game

    Game -> DatosCompartidos: actualizarVidas()
    activate DatosCompartidos
    DatosCompartidos -> Individuo: getTurnosVida()
    Individuo -> DatosCompartidos: setTurnosVida(vida - 1)
    deactivate DatosCompartidos

    Game -> DatosCompartidos: actualizarProbabilidades()
    activate DatosCompartidos
    DatosCompartidos -> Individuo: getProbClon(), getProbRepr()
    Individuo -> DatosCompartidos: setProbClon(), setProbRepr()
    deactivate DatosCompartidos

    Game -> DatosCompartidos: eliminarIndividuos()
    activate DatosCompartidos
    DatosCompartidos -> Square: getIndividuos()
    Square -> Individuo: getTurnosVida()
    Individuo -> Square: del()
    deactivate DatosCompartidos

    Game -> DatosCompartidos: eliminarRecursos()
    activate DatosCompartidos
    DatosCompartidos -> Recurso: getTiempoVida()
    Recurso -> Square: getID(), getCelda()
    Square -> Celda: setTipo(0.0)
    Square -> Celda: setOcupado(false)
    Square -> Recursos: del()
    deactivate DatosCompartidos

    Game -> DatosCompartidos: eliminarRecursos(listaDel)
    activate DatosCompartidos
    DatosCompartidos -> Recursos: del()
    deactivate DatosCompartidos

    Game -> DatosCompartidos: actualizarIndividuos()
    Game -> Tablero: getSquares()
    Tablero -> Square: getIndividuos()
    Square -> Individuo: getTipo()
    alt tipoIndividuo == 0
        Game -> Square: addTipo(1.1)
    else tipoIndividuo == 1
        Game -> Square: addTipo(1.2)
    else tipoIndividuo == 2
        Game -> Square: addTipo(1.3)
    end

    Game -> DatosCompartidos: moverIndividuos()
    activate DatosCompartidos
    DatosCompartidos -> Tablero: getSquares()
    Tablero -> Square: getDato()
    Game -> Square: moverIndividuosCuadrado(listaCuadrados, cuadrado, listaID)
    activate Square
    Square -> Individuo: getTipo()
    alt ind.getTipo() == 0
        Game -> Square: moverIndBasico()
    else ind.getTipo() == 1
        Game -> Square: moverIndNormal()
    else ind.getTipo() == 2
        Game -> Square: moverIndAvanzado()
        activate Square
        Square -> Individuo: getRecorrido()
        alt ind.getRecorrido().isVacia()
            Square -> DatosCompartidos: getListaRecursos()
            activate DatosCompartidos
            DatosCompartidos -> Recurso: getTipoRecurso()
            Recurso -> Square: getID(), getCelda()
            Square -> Square: addTipo(0.0)
            Square -> Square: setOcupado(false)
            DatosCompartidos -> Individuo: buscarRecorridoAvanzado()
            deactivate DatosCompartidos
            Square -> Individuo: moverIndAvanzadoDirigido()
        else
            Individuo -> Square: moverIndAvanzadoDirigido()
        end
        deactivate Square
    end
    deactivate Square

    Game -> DatosCompartidos: consumirRecursos()
    activate DatosCompartidos
    DatosCompartidos -> Tablero: getSquares()
    Tablero -> Square: getIndividuos(), getRecursos()
    loop for each Square
        alt !actual.getIndividuos().isVacia() && !actual.getRecursos().isVacia()
            loop for each Individuo
                loop for each Recurso
                    alt recurso.getTipoRecurso() == 2
                        Game -> Square: consumirAgua()
                        Square -> Individuo: setTurnosVida(ind.getTurnosVida() + rec.getEfecto())
                        ControllerMainStage -> log: info("El individuo {ind.getID()} ha consumido agua en la casilla {actual.getX()}, {actual.getY()}")
                    else recurso.getTipoRecurso() == 3
                        Game -> Square: consumirComida()
                        Square -> Individuo: setTurnosVida(ind.getTurnosVida() + rec.getEfecto())
                        ControllerMainStage -> log: info("El individuo {ind.getID()} ha consumido comida en la casilla {actual.getX()}, {actual.getY()}")
                    else recurso.getTipoRecurso() == 4
                        Game -> Square: consumirMontana()
                        Square -> Individuo: setTurnosVida(ind.getTurnosVida() - rec.getEfecto())
                        ControllerMainStage -> log: info("El individuo {ind.getID()} ha consumido montaÃ±a en la casilla {actual.getX()}, {actual.getY()}")
                    else recurso.getTipoRecurso() == 5
                        Game -> Square: consumirBiblioteca()
                        Square -> Individuo: setProbRepr(ind.getProbRepr() + rec.getEfecto())
                        ControllerMainStage -> log: info("El individuo {ind.getID()} ha consumido biblioteca en la casilla {actual.getX()}, {actual.getY()}")
                    else recurso.getTipoRecurso() == 6
                        Game -> Square: consumirTesoro()
                        Square -> Individuo: setProbClon(ind.getProbClon() + rec.getEfecto())
                        ControllerMainStage -> log: info("El individuo {ind.getID()} ha consumido tesoro en la casilla {actual.getX()}, {actual.getY()}")
                    else
                        DatosCompartidos -> ListaSimple: add(ind)
                        Square -> Individuo: del()
                        ControllerMainStage -> log: info("El individuo {ind.getID()} ha sido eliminado de la casilla {actual.getX()}, {actual.getY()}")
                    end
                end
            end
        end
    end

    Game -> DatosCompartidos: eliminarIndividuos(listaDel)
    DatosCompartidos -> Individuos: del()

    Game -> DatosCompartidos: reproduccion()
    activate DatosCompartidos
    DatosCompartidos -> Tablero: getSquares()
    Tablero -> Square: getIndividuos()
    loop for each Square
        alt actual.getIndividuos().getNumeroElementos() == 2
            DatosCompartidos -> Individuo: getPrimero(), getDato(1)
            Individuo -> DatosCompartidos: getProbRepr()
            alt generarEnteroAleatorio() <= probRepr1 && generarEnteroAleatorio() <= probRepr2
                Individuo -> DatosCompartidos: getTipo()
                alt tipo1.compareTo(tipo2) >= 0
                    DatosCompartidos -> Individuo: new IndBasico()
                else tipo1.compareTo(tipo2) < 0
                    DatosCompartidos -> Individuo: new IndAvanzado()
                end
                Individuo -> DatosCompartidos: setArbolGenealogico()
                DatosCompartidos -> Square: addTipo()
                Square -> Individuo: add()
                DatosCompartidos -> ListaIndividuos: add()
                ControllerMainStage -> log: info("Ha habido reproduccion entre los individuos {ind1.getID()} y {ind2.getID()}. Ahora hay {DatosCompartidos.getNumIndividuos()} individuos.")
            else
                Individuo -> Square: del()
                Individuo -> Square: del()
            end
        end
    end
    deactivate DatosCompartidos

    Game -> DatosCompartidos: aparicionRecursos()
    activate DatosCompartidos
    loop for each Square
        alt revisionAparicion(agua)
            DatosCompartidos -> Square: addRecursos(2.0)
        end
        alt revisionAparicion(comida)
            DatosCompartidos -> Square: addRecursos(3.0)
        end
        alt revisionAparicion(montana)
            DatosCompartidos -> Square: addRecursos(4.0)
        end
        alt revisionAparicion(biblioteca)
            DatosCompartidos -> Square: addRecursos(5.0)
        end
        alt revisionAparicion(tesoro)
            DatosCompartidos -> Square: addRecursos(6.0)
        end
        alt revisionAparicion(pozo)
            DatosCompartidos -> Square: addRecursos(7.0)
        end
    end
    deactivate DatosCompartidos

    Game -> DatosCompartidos: actualizarTablero()
    activate DatosCompartidos
    DatosCompartidos -> Tablero: getSquares()
    loop for each Square
        DatosCompartidos -> Square: actualizarSquare()
        Square -> Celda: actualizarCelda()
    end
    deactivate DatosCompartidos

    Game -> DatosCompartidos: clearTablero()
    activate DatosCompartidos
    DatosCompartidos -> Tablero: getSquares()
    loop for each Square
        DatosCompartidos -> Celda: setTipo(0.0), setOcupado(false)
        Square -> ListaSimple: setIndividuos(new ListaSimple<>()), setRecursos(new ListaSimple<>())
    end
    deactivate DatosCompartidos

    deactivate Game
else Game is not initiated
    ControllerMainStage -> controlLoop: stop()
end

deactivate ControllerMainStage
@enduml
